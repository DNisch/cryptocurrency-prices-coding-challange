{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/daniel/git/cryptocurrency-prices-coding-challange/frontend/src/pages/CryptoCurrency.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from \"prop-types\";\nimport axios from 'axios';\n\nconst loadData = (currency, setData) => {\n  axios.get(`/price/${currency}`).then(response => {\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\nexport default function CryptoCurrency({\n  currency\n}) {\n  _s();\n\n  const [data, setData] = React.useState({});\n  React.useEffect(() => {\n    loadData(currency, setData);\n    const interval = setInterval(() => {\n      loadData(currency, setData);\n    });\n    return () => clearInterval(interval);\n  }, [currency]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CryptoCurrency, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = CryptoCurrency;\nCryptoCurrency.propTypes = {\n  currency: PropTypes.string.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoCurrency\");","map":{"version":3,"sources":["/home/daniel/git/cryptocurrency-prices-coding-challange/frontend/src/pages/CryptoCurrency.tsx"],"names":["React","PropTypes","axios","loadData","currency","setData","get","then","response","console","log","data","catch","error","CryptoCurrency","useState","useEffect","interval","setInterval","clearInterval","propTypes","string","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsC,YAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAmBC,OAAnB,KAA6E;AAC5FH,EAAAA,KAAK,CAACI,GAAN,CAAW,UAASF,QAAS,EAA7B,EACGG,IADH,CACQC,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACD,GAHH,EAIGC,KAJH,CAISC,KAAK,IAAI;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,GANH;AAOD,CARD;;AAUA,eAAe,SAASC,cAAT,CAAyB;AAAEV,EAAAA;AAAF,CAAzB,EAAoF;AAAA;;AACjG,QAAM,CAACO,IAAD,EAAON,OAAP,IAAkBL,KAAK,CAACe,QAAN,CAAe,EAAf,CAAxB;AAEAf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBb,IAAAA,QAAQ,CAACC,QAAD,EAAWC,OAAX,CAAR;AACA,UAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCf,MAAAA,QAAQ,CAACC,QAAD,EAAWC,OAAX,CAAR;AACD,KAF2B,CAA5B;AAIA,WAAO,MAAMc,aAAa,CAACF,QAAD,CAA1B;AACD,GAPD,EAOG,CAACb,QAAD,CAPH;AASA,sBACE;AAAA,cAAMO;AAAN;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAfuBG,c;;KAAAA,c;AAiBxBA,cAAc,CAACM,SAAf,GAA2B;AACzBhB,EAAAA,QAAQ,EAAEH,SAAS,CAACoB,MAAV,CAAiBC;AADF,CAA3B","sourcesContent":["import React from 'react';\nimport PropTypes, { InferProps } from \"prop-types\";\nimport axios from 'axios';\n\nconst loadData = (currency: string, setData: React.Dispatch<React.SetStateAction<String>>) => {\n  axios.get(`/price/${currency}`)\n    .then(response => {\n      console.log(response.data);\n    })\n    .catch(error => {\n      console.log(error);\n    });\n};\n\nexport default function CryptoCurrency ({ currency }: InferProps<typeof CryptoCurrency.propTypes>) {\n  const [data, setData] = React.useState({});\n\n  React.useEffect(() => {\n    loadData(currency, setData);\n    const interval = setInterval(() => {\n      loadData(currency, setData);\n    });\n\n    return () => clearInterval(interval);\n  }, [currency]);\n\n  return (\n    <div>{data}</div>\n  )\n}\n\nCryptoCurrency.propTypes = {\n  currency: PropTypes.string.isRequired\n};"]},"metadata":{},"sourceType":"module"}